  /// \file XmlConfigurationIO.h
/*
 *
 * XmlConfigurationIO.h header template automatically generated by a class generator
 * Creation date : jeu. janv. 26 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef XMLCONFIGURATIONIO_H
#define XMLCONFIGURATIONIO_H

#include "dqm4hep/ConfigurationIO.h"

namespace dqm4hep {

  namespace core {

    class TiXmlElement;
    class ConfigurationHandle;

    /**
     * XmlConfigurationIO class
     */
    class XmlConfigurationIO : public ConfigurationIO
    {
     public:
     /**
      * @brief Dtor
      */
     ~XmlConfigurationIO() {}

     /**
      * Read settings from the xml input file and store the read parameters into the parameter directory
      *
      * @param  input the xml input file
      * @param  pDirectory the top-level directory to store parameters
      */
     StatusCode read(const std::string &xmlFileName, ParameterDirectory *pDirectory);

     /**
      * Write settings from the directory into the output
      *
      * @param  output the xml output file where to store parameters
      * @param  pDirectory the top-level directory to pull parameters from
      */
     StatusCode write(const std::string &xmlFileName, ParameterDirectory *pDirectory);

     /**
      * Get the configuration IO type (xml)
      */
     std::string getType() const;

   private:

     bool isDirectory(const TiXmlElement *const pXmlElement) const;

     std::string getParameter(const TiXmlElement *const pXmlElement) const;

     StatusCode read(TiXmlElement *pXmlElement, ParameterDirectory *pDirectory);

     StatusCode write(TiXmlElement *pXmlElement, const ConfigurationHandle &configHandle);
    };

  }

}

#endif  //  XMLCONFIGURATIONIO_H
