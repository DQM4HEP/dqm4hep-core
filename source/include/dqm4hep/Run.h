/// \file DQMRun.h
/*
 *
 * DQMRun.h header template automatically generated by a class generator
 * Creation date : dim. mars 29 2015
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

#ifndef DQM4HEP_RUN_H
#define DQM4HEP_RUN_H

// -- dqm4hep headers
#include <dqm4hep/Internal.h>
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/json.h>

// -- std headers
#include <ctime>
#include <string>

namespace dqm4hep {

  namespace core {

    /** Run class
     */
    class Run {
    public:
      /** Constructor with run number (optional)
       */
      Run(int runNumber = 0, const std::string &description = "", const std::string &detectorName = "");

      /** Destructor
       */
      ~Run() = default;

      /** Get the run number
       */
      int runNumber() const;

      /** Get the start time
       */
      TimePoint startTime() const;

      /** Get the end time
       */
      TimePoint endTime() const;

      /** Get the run description
       */
      const std::string &description() const;

      /** Get the detector name related to this run
       */
      const std::string &detectorName() const;

      /** Set the run number
       */
      void setRunNumber(int runNumber);

      /** Set the start time
       */
      void setStartTime(const TimePoint &startTime);

      /** Set the end time
       */
      void setEndTime(const TimePoint &endTime);

      /** Set the run description
       */
      void setDescription(const std::string &description);

      /** Set the detector name related to this run
       */
      void setDetectorName(const std::string &detectorName);

      /** Set a parameter.
       *  The template value is converted into string
       */
      template <typename T>
      void setParameter(const std::string &key, const T &value);

      /** Get a parameter.
       *  The value is converted into asked type.
       *  If the parameter is not found, the value remains unchanged
       */
      template <typename T>
      void parameter(const std::string &key, T &value) const;

      /** Get the number of parameters
       */
      unsigned int nParameters() const;

      /** Get the parameters keys
       */
      StringVector parameterKeys() const;
      
      /**
       *  @brief  Get the run parameters
       */
      const StringMap &parameters() const;

      /** Reset the run
       */
      void reset();

      /** Convert run to json
       */
      void toJson(json &value) const;

      /** Read run info from json
       */
      void fromJson(const json &value);

    protected:
      int                     m_runNumber = {0};
      TimePoint               m_startTime = {};
      TimePoint               m_endTime = {};
      std::string             m_detectorName = {""};
      std::string             m_description = {""};
      StringMap               m_parametersMap = {};
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    std::ostream& operator<<(std::ostream &out, const Run &run);

    //-------------------------------------------------------------------------------------------------

    inline int Run::runNumber() const {
      return m_runNumber;
    }

    //-------------------------------------------------------------------------------------------------

    inline TimePoint Run::startTime() const {
      return m_startTime;
    }

    //-------------------------------------------------------------------------------------------------

    inline TimePoint Run::endTime() const {
      return m_endTime;
    }

    //-------------------------------------------------------------------------------------------------

    inline const std::string &Run::description() const {
      return m_description;
    }

    //-------------------------------------------------------------------------------------------------

    inline const std::string &Run::detectorName() const {
      return m_detectorName;
    }

    //-------------------------------------------------------------------------------------------------

    inline void Run::setRunNumber(int rn) {
      m_runNumber = rn;
    }

    //-------------------------------------------------------------------------------------------------

    inline void Run::setStartTime(const TimePoint &st) {
      m_startTime = st;
    }

    //-------------------------------------------------------------------------------------------------

    inline void Run::setEndTime(const TimePoint &et) {
      m_endTime = et;
    }

    //-------------------------------------------------------------------------------------------------

    inline void Run::setDescription(const std::string &des) {
      m_description = des;
    }

    //-------------------------------------------------------------------------------------------------

    inline void Run::setDetectorName(const std::string &dn) {
      m_detectorName = dn;
    }

    //-------------------------------------------------------------------------------------------------

    template <typename T>
    inline void Run::setParameter(const std::string &key, const T &value) {
      m_parametersMap[key] = dqm4hep::core::typeToString<T>(value);
    }

    //-------------------------------------------------------------------------------------------------

    template <typename T>
    inline void Run::parameter(const std::string &key, T &value) const {
      auto findIter = m_parametersMap.find(key);

      if (m_parametersMap.end() == findIter)
        return;

      dqm4hep::core::stringToType(findIter->second, value);
    }

    //-------------------------------------------------------------------------------------------------

    template <>
    inline void Run::setParameter(const std::string &key, const std::string &value) {
      m_parametersMap[key] = value;
    }

    //-------------------------------------------------------------------------------------------------

    template <>
    inline void Run::parameter(const std::string &key, std::string &value) const {
      auto findIter = m_parametersMap.find(key);

      if (m_parametersMap.end() == findIter)
        return;

      value = findIter->second;
    }

    //-------------------------------------------------------------------------------------------------

    inline unsigned int Run::nParameters() const {
      return m_parametersMap.size();
    }
  }
}

#endif //  DQM4HEP_RUN_H
