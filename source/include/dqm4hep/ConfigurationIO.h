  /// \file ConfigurationIO.h
/*
 *
 * ConfigurationIO.h header template automatically generated by a class generator
 * Creation date : jeu. janv. 26 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef CONFIGURATIONIO_H
#define CONFIGURATIONIO_H

#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/ParameterDirectory.h"

namespace dqm4hep {

  namespace core {

    /**
     * ConfigurationIO class
     *
     * Main interface to read/write configuration from/to
     * a specific format to/from an internal parameter directory
     */
    class ConfigurationIO
    {
     public:
     /**
      * Destructor
      */
     virtual ~ConfigurationIO() {}

     /**
      * Read settings from the input and store the read parameters into the parameter directory
      *
      * @param  input the input source. Can be a file name or database descriptor to decode.
      * @param  pDirectory the top-level directory to store parameters
      */
     virtual StatusCode read(const std::string &input, ParameterDirectory *pDirectory) = 0;

     /**
      * Write settings from the directory into the output
      *
      * @param  output the output where to store parameters. Can be a file or database descriptor to decode.
      * @param  pDirectory the top-level directory to pull parameters from
      */
     virtual StatusCode write(const std::string &output, ParameterDirectory *pDirectory) = 0;

     /**
      * Get the configuration IO type (i.e json, xml, database)
      * @return [description]
      */
     virtual std::string getType() const = 0;
    };

  }

}

#endif  //  CONFIGURATIONIO_H
