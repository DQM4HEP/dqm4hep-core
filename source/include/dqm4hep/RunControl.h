/// \file DQMRunControl.h
/*
 *
 * DQMRunControl.h header template automatically generated by a class generator
 * Creation date : mar. oct. 7 2014
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQM4HEP_RUNCONTROL_H
#define DQM4HEP_RUNCONTROL_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/Signal.h"
#include "dqm4hep/Run.h"

namespace dqm4hep {

  namespace core {

    class Run;

    /**
     * RunControl class.
     *
     * Run control backend. Provide the run control logic
     * and start/end of run signal handling. Start a new run
     * using the startNewRun() method and stop the surrent run
     * using the endCurrentRun() method. When these methods are
     * called, users can be notified using the two signals. To
     * connect to these signals, use it like this :
     *
     * @code
     * RunControl runControl("my-rc");
     * MyClass *pClass = new MyClass();
     *
     * runControl.onStartOfRun().connect(pClass, &MyClass::handleStartOfRun);
     * Run run;
     * run.setRunNumber(42);
     *
     * // this will automatically call you method MyClass::handleStartOfRun(const Run &)
     * runControl.startNewRun(run);
     *
     * @endcode
     *
     */
    class RunControl
    {
    public:
      /**
       * Constructor
       *
       * @param name the run control name
       * @param password an optionnal password to check while steering the run control
       */
      RunControl(const std::string &name, const std::string &password = "");

      /**
       * Get the run control name
       */
      const std::string &getName() const;

      /**
       * Start a new run. nd the current one if running.
       *
       * @param run the run descriptor
       * @param password an optionnal password to check (if provided in constructor)
       */
      void startNewRun(const Run &run, const std::string &password = "");

      /**
       * End the current run.
       *
       * @param password an optionnal password to check (if provided in constructor)
       */
      void endCurrentRun(const std::string &password = "");

      /**
       * Get the run descriptor.
       * @return the current run descriptor if running, the previous run descriptor else
       */
      const Run &getRun() const;

      /**
       * Get the run control state
       */
      State getRunState() const;

      /**
       * Get the start of run signal handler.
       * Use it like this :
       *
       * @code
       * runControl.onStartOfRun().connect(pMyClass, &MyClass::handleStartOfRun);
       * @endcode
       */
      Signal<const Run &> &onStartOfRun();

      /**
       * Get the end of run signal handler.
       * Use it like this :
       *
       * @code
       * runControl.onEndOfRun().connect(pMyClass, &MyClass::handleEndOfRun);
       * @endcode
       */
      Signal<void> &onEndOfRun();

    private:
      State                                 m_runState;           ///< The run state
      Run                                   m_run;                ///< The run descriptor
      std::string                           m_password;           ///< An optional password to check on sor/eor
      std::string                           m_name;               ///< The run control name
      Signal<const Run &>                   m_startOfRunSignal;   ///< The start of run signal handler
      Signal<void>                          m_endOfRunSignal;     ///< The end of run signal handler
    };

  }

}

#endif  //  DQM4HEP_RUNCONTROL_H
