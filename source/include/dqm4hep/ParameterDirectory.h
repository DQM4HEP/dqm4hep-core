  /// \file ParameterDirectory.h
/*
 *
 * ParameterDirectory.h header template automatically generated by a class generator
 * Creation date : mer. janv. 25 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef PARAMETERDIRECTORY_H
#define PARAMETERDIRECTORY_H

#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/Parameter.h"
#include "dqm4hep/Parameters.h"

namespace dqm4hep {

  namespace core {

    class ConfigurationHandle;

    /**
     * ParameterDirectory class
     */
    class ParameterDirectory
    {
      friend class ConfigurationHandle;
    public:
      typedef std::map<std::string, ParameterDirectory*>  ParameterDirectoryMap;
      typedef ParameterDirectoryMap::iterator iterator;
      typedef ParameterDirectoryMap::const_iterator const_iterator;

      /**
       * Create a top level directory. Ownership transfered to caller
       */
      static ParameterDirectory *createToLevelDirectory();

      /**
       * Destructor
       */
      ~ParameterDirectory();

      /**
       * Get the directory name, i.e 'thisDir'
       */
      const std::string &getName() const;

      /**
       * Get the directory full name i.e '/dir/subDir/thisDir'
       */
      std::string getFullName() const;

      /**
       * Create a new subdirectory. If already exists, returns the existing one
       * Empty name is invalid
       *
       * @param name the name of the directory to create
       */
      ParameterDirectory *mkdir(const std::string &name);

      /**
       * Remove the target directory
       *
       * @param name the sub-directory name
       */
      bool rmdir(const std::string &name);

      /**
       * Printout all parameters in this directory, optionally recursively
       *
       * @param recursive whether to printout parameters in all sub-directories
       */
      void ls(bool recursive = false) const;

      /**
       * Whether the sub-directory exists. Can be 'dir' or '/dir/dir2/dir3'
       *
       * @param name the sub-directory name
       */
      bool dirExists(const std::string &name) const;

      /**
       * Get the stored parameters
       */
      const Parameters &getParameters() const;

      /**
       * Get the stored parameters
       */
      Parameters &getParameters();

      /**
       * Create a configuration handle with this directory
       */
      ConfigurationHandle createHandle();

      /**
       * Create a configuration handle with the target sub-directory
       * @param  name the sub-directory name
       */
      ConfigurationHandle createHandle(const std::string &name);

      /**
       * Get the list of sub-directories
       */
      StringVector getDirectorList() const;

      /**
       * Get a begin iterator to sub-directory list
       */
      iterator begin();

      /**
       * Get an end iterator to sub-directory list
       */
      iterator end();

      /**
       * Get a begin const_iterator to sub-directory list
       */
      const_iterator begin() const;

      /**
       * Get an end const_iterator to sub-directory list
       */
      const_iterator end() const;

      /**
       * Find a sub-directory. Can only be a direct sub-directory.
       * Directories like '/dir' '/dir/dir2' are discarded.
       */
      iterator find(const std::string &name);

      /**
      * Find a sub-directory. Can only be a direct sub-directory.
      * Directories like '/dir' '/dir/dir2' are discarded.
       */
      const_iterator find(const std::string &name) const;

    private:
      /**
       * Constructor
       */
      ParameterDirectory(const std::string &name, ParameterDirectory *pParent);

      /**
      * Printout all parameters in this directory, optionally recursively
      *
      * @param recursive whether to printout parameters in all sub-directories
      * @param depth the sub-directory depth used for printout formatting
       */
      void ls(bool recursive, unsigned int depth) const;

      /**
       * Get a sub-directory. Returns nullptr if not found
       * @param  subDirName the sub-directory name
       */
      ParameterDirectory *getSubDirectory(const std::string &subDirName);

      /**
      * Get a sub-directory. Returns nullptr if not found
      * @param  subDirName the sub-directory name
       */
      const ParameterDirectory *getSubDirectory(const std::string &subDirName) const;

    private:
      std::string                         m_name;               ///< The directory name
      ParameterDirectory                 *m_pParentDirectory;   ///< The parent directory pointer
      Parameters                          m_parameters;         ///< The parameters stored in this directory
      ParameterDirectoryMap               m_subDirectories;     ///< The sub-directory map
    };

  }

}

#endif  //  PARAMETERDIRECTORY_H
