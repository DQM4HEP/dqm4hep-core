/// \file RunControlServer.h
/*
*
* RunControlServer.h header template automatically generated by a class generator
* Creation date : lun. janv. 23 2017
*
* This file is part of DQM4HEP libraries.
*
* DQM4HEP is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* based upon these libraries are permitted. Any copy of these libraries
* must include this copyright notice.
*
* DQM4HEP is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
*
* @author Remi Ete
* @copyright CNRS , IPNL
*/


#ifndef RUNCONTROLSERVER_H
#define RUNCONTROLSERVER_H

#include "dqm4hep/Server.h"
#include "dqm4hep/Service.h"
#include "dqm4hep/Run.h"
#include "dqm4hep/RunControl.h"
#include "dqm4hep/RunControlInterface.h"

namespace dqm4hep {

  namespace core {

    /**
     * RunControlServer class.
     */
    class RunControlServer
    {
    public:
      /**
       * Constructor
       */
      RunControlServer(const std::string &name);

      /**
       * Destructor
       */
      ~RunControlServer();

      /**
       * Start the run control server
       */
      void start();

      /**
       * Stop the run control server
       */
      void stop();

      /**
       * Whether the run control server is running
       */
      bool isRunning() const;

      /**
       *
       */
      void setRunControlInterface(RunControlInterface *pRunControlInterface);

    private:
      void handleRunInfoRequest(const Json::Value &request, Json::Value &response);
      void runToJson(const Run &run, Json::Value &value);
      void startNewRunSignal(const Run &run);
      void endCurrentRunSignal();

    private:
      net::Server                         *m_pServer;
      net::Service<Json::Value>           *m_pRunService;
      RunControl                          *m_pRunControl;
      RunControlInterface                 *m_pRunControlInterface;
    };

  }

}

#endif  //  RUNCONTROLSERVER_H
