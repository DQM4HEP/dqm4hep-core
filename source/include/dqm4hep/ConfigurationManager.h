  /// \file ConfigurationManager.h
/*
 *
 * ConfigurationManager.h header template automatically generated by a class generator
 * Creation date : jeu. janv. 26 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef CONFIGURATIONMANAGER_H
#define CONFIGURATIONMANAGER_H

#include "dqm4hep/ConfigurationIO.h"

namespace dqm4hep {

  namespace core {

    /**
     * ConfigurationManager class
     */
    class ConfigurationManager
    {
     public:
       typedef std::map<std::string, ConfigurationIO*> ConfigurationIOMap;

     /**
      * Constructor
      */
     ConfigurationManager();

     /**
      * Destructor
      */
     ~ConfigurationManager();

     /**
      *
      */
     std::string guessIOTypeFromInput(const std::string &input) const;

     /**
      * [readSettings description]
      * @param  ioType [description]
      * @param  input  [description]
      * @return        [description]
      */
     StatusCode readSettings(const std::string &ioType, const std::string &input);

     /**
      * [writeSettings description]
      * @param  ioType [description]
      * @param  outut  [description]
      * @return        [description]
      */
     StatusCode writeSettings(const std::string &ioType, const std::string &output);

     /**
      *
      */
     void printConfiguration() const;

   private:
     /**
      *
      */
     template <typename T>
     StatusCode addConfigurationIO();

   private:
     ConfigurationIOMap                 m_configurationIOMap;
     ParameterDirectory                *m_pRootParameterDirectory;
    };

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    template <typename T>
    inline StatusCode ConfigurationManager::addConfigurationIO()
    {
      ConfigurationIO *pConfigurationIO = new T();
      std::string type(pConfigurationIO->getType());

      auto findIter = m_configurationIOMap.find(type);

      if(findIter != m_configurationIOMap.end())
      {
        delete pConfigurationIO;
        return STATUS_CODE_ALREADY_PRESENT;
      }

      m_configurationIOMap[type] = pConfigurationIO;

      return STATUS_CODE_SUCCESS;
    }

  }

}

#endif  //  CONFIGURATIONMANAGER_H
