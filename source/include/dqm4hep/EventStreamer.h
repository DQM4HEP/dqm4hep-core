/// \file DQMEventStreamer.h
/*
 *
 * DQMEventStreamer.h header template automatically generated by a class generator
 * Creation date : mar. dï¿½c. 15 2015
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

#ifndef DQM4HEP_EVENTSTREAMER_H
#define DQM4HEP_EVENTSTREAMER_H

// -- dqm4hep headers
#include <dqm4hep/Event.h>
#include <dqm4hep/StatusCodes.h>

namespace xdrstream {
  class IODevice;
}

namespace dqm4hep {

  namespace core {

    class Event;
    
    class EventStreamer {
    public:
      /**
       *  @brief  Default constructor
       */
      EventStreamer() = default;
      
      /**
       *  @brief  Default destructor
       */
      ~EventStreamer() = default;
      
      /**
       *  @brief  Write an event using an xdrstream device.
       *          The streamer info is taken from Event::getStreamerName()
       *          and from the plugin manager.
       *          
       *  @param  event the event to write
       *  @param  device the xdrstream device to write with
       */
      StatusCode writeEvent(EventPtr event, xdrstream::IODevice *device);
      
      /**
       *  @brief  Read an event using an xdrstream device.
       *          The streamer info is read from the buffer
       *          and the streamer if allocated from the plugin manager.
       *          
       *  @param  event the event to read
       *  @param  device the xdrstream device to read with
       */
      StatusCode readEvent(EventPtr &event, xdrstream::IODevice *pDevice);
      
    private:
      std::string                  m_streamerName = {""};     ///< The current event streamer name in use
      EventStreamerPluginPtr       m_streamer = {nullptr};    ///< The current event streamer in use
    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    /** EventStreamerPlugin class
     */
    class EventStreamerPlugin {
    public:
      /** Destructor
       */
      virtual ~EventStreamerPlugin() = default;

      /** Factory method to create the corresponding event to this streamer.
       *  The event is expected to contains an allocated wrapped event
       */
      virtual EventPtr createEvent() const = 0;

      /** Serialize an event object and store it in the data stream
       */
      virtual StatusCode write(EventPtr event, xdrstream::IODevice *pDevice) = 0;

      /** De-serialize an event given from the data stream
       */
      virtual StatusCode read(EventPtr event, xdrstream::IODevice *pDevice) = 0;
    };

  }
  
}

#endif //  DQM4HEP_EVENTSTREAMER_H
