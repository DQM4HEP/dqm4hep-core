/// \file AllocatorHelper.h
/*
 *
 * AllocatorHelper.h header template automatically generated by a class generator
 * Creation date : dim. oct. 5 2014
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright
 */

#ifndef DQM4HEP_ALLOCATORHELPER_H
#define DQM4HEP_ALLOCATORHELPER_H

// -- std headers
#include <string>

// -- dqm4hep headers
#include <dqm4hep/RootHeaders.h>

namespace dqm4hep {

  namespace core {
    
    // these ones come from DQM4HEP, not ROOT
    template <typename T>
    class TScalarObject;
    class TDynamicGraph;
    
    class TiXmlElement;

    /** 
     *  @brief  AllocatorHelper class
     */
    template <typename BaseType, typename RealType, typename... Args>
    class AllocatorHelper {
    public:
      /** 
       *  @brief  Create a new instance of RealType, inheriting
       *          from BaseType using Args type as constructor parameters
       */
      BaseType *create(Args... args) const {
        return new RealType(args...);
      }
    };

    typedef AllocatorHelper<TObject, TH1D, const char *, const char *, int, float, float> TH1DAllocator;
    typedef AllocatorHelper<TObject, TH1F, const char *, const char *, int, float, float> TH1FAllocator;
    typedef AllocatorHelper<TObject, TH1I, const char *, const char *, int, float, float> TH1IAllocator;
    typedef AllocatorHelper<TObject, TH1C, const char *, const char *, int, float, float> TH1CAllocator;
    typedef AllocatorHelper<TObject, TH1S, const char *, const char *, int, float, float> TH1SAllocator;
    typedef AllocatorHelper<TObject, TH2D, const char *, const char *, int, float, float, int, float, float> TH2DAllocator;
    typedef AllocatorHelper<TObject, TH2F, const char *, const char *, int, float, float, int, float, float> TH2FAllocator;
    typedef AllocatorHelper<TObject, TH2I, const char *, const char *, int, float, float, int, float, float> TH2IAllocator;
    typedef AllocatorHelper<TObject, TH2C, const char *, const char *, int, float, float, int, float, float> TH2CAllocator;
    typedef AllocatorHelper<TObject, TH2S, const char *, const char *, int, float, float, int, float, float> TH2SAllocator;
    typedef AllocatorHelper<TObject, TH3D, const char *, const char *, int, float, float, int, float, float, int, float, float> TH3DAllocator;
    typedef AllocatorHelper<TObject, TH3F, const char *, const char *, int, float, float, int, float, float, int, float, float> TH3FAllocator;
    typedef AllocatorHelper<TObject, TH3I, const char *, const char *, int, float, float, int, float, float, int, float, float> TH3IAllocator;
    typedef AllocatorHelper<TObject, TH3C, const char *, const char *, int, float, float, int, float, float, int, float, float> TH3CAllocator;
    typedef AllocatorHelper<TObject, TH3S, const char *, const char *, int, float, float, int, float, float, int, float, float> TH3SAllocator;
    typedef AllocatorHelper<TObject, THStack, const char *, const char *> THStackAllocator;
    typedef AllocatorHelper<TObject, TH2Poly, const char *, const char *, double, double, double, double> TH2PolyAllocator;
    typedef AllocatorHelper<TObject, TProfile, const char *, const char *, int, float, float, float, float> TProfileAllocator;
    typedef AllocatorHelper<TObject, TProfile2D, const char *, const char *, int, float, float, int, float, float, float, float> TProfile2DAllocator;
    typedef AllocatorHelper<TObject, TScalarObject<int>, int> TScalarIntAllocator;
    typedef AllocatorHelper<TObject, TScalarObject<float>, float> TScalarRealAllocator;
    typedef AllocatorHelper<TObject, TScalarObject<double>, double> TScalarDoubleAllocator;
    typedef AllocatorHelper<TObject, TScalarObject<float>, float> TScalarFloatAllocator;
    typedef AllocatorHelper<TObject, TScalarObject<short>, short> TScalarShortAllocator;
    typedef AllocatorHelper<TObject, TScalarObject<long>, long> TScalarLongAllocator;
    typedef AllocatorHelper<TObject, TScalarObject<Long64_t>, Long64_t> TScalarLong64Allocator;
    typedef AllocatorHelper<TObject, TScalarObject<std::string>, std::string> TScalarStringAllocator;
    typedef AllocatorHelper<TObject, TGraph> TGraphAllocator;
    typedef AllocatorHelper<TObject, TGraphErrors> TGraphErrorsAllocator;
    typedef AllocatorHelper<TObject, TGraph2D> TGraph2DAllocator;
    typedef AllocatorHelper<TObject, TMultiGraph> TMultiGraphAllocator;
    typedef AllocatorHelper<TObject, TDynamicGraph> TDynamicGraphAllocator;
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------
    
    /**
     *  @brief  TObjectXMLAllocator class
     */
    class TObjectXMLAllocator {
    public:
      /**
       *  @brief  Destructor
       */
      virtual ~TObjectXMLAllocator() {}
      /**
       *  @brief  Create an instance of a sub class of TObject from the xml element 
       *
       * @param  element the input xml element describing the object to allocate
       */
      virtual TObject* create(TiXmlElement *element) const = 0;
    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------
    
    /// TXMLDefaultAllocator class for all ROOT class with default constructor 
    class DefaultXMLAllocator final : public TObjectXMLAllocator {
      TObject* create(TiXmlElement *element) const;
    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------
    
    /// TH1XMLAllocator class for all TH1 types 
    class TH1XMLAllocator final : public TObjectXMLAllocator {
      TObject* create(TiXmlElement *element) const;
    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------
    
    /// TH2XMLAllocator class for all TH2 types 
    class TH2XMLAllocator final : public TObjectXMLAllocator {
      TObject* create(TiXmlElement *element) const;
    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------
    
    /// TH3XMLAllocator class for all TH3 types 
    class TH3XMLAllocator final : public TObjectXMLAllocator {
      TObject* create(TiXmlElement *element) const;
    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------
    
    /// THStackXMLAllocator class for all THStack type
    class THStackXMLAllocator final : public TObjectXMLAllocator {
      TObject* create(TiXmlElement *element) const;
    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------
    
    /// THStackXMLAllocator class for all TH2Poly type
    class TH2PolyXMLAllocator final : public TObjectXMLAllocator {
      TObject* create(TiXmlElement *element) const;
    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------
    
    /// TProfileXMLAllocator class for all TProfile type
    class TProfileXMLAllocator final : public TObjectXMLAllocator {
      TObject* create(TiXmlElement *element) const;
    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------
    
    /// TProfile2DXMLAllocator class for all TProfile2D type
    class TProfile2DXMLAllocator final : public TObjectXMLAllocator {
      TObject* create(TiXmlElement *element) const;
    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------
    
    /// TScalarXMLAllocator class for all scalar types
    class TScalarXMLAllocator final : public TObjectXMLAllocator {
      TObject* create(TiXmlElement *element) const;
    };
    
  }
  
}

#endif //  DQM4HEP_ALLOCATORHELPER_H
