/// \file Archiver.h
/*
 *
 * Archiver.h header template automatically generated by a class generator
 * Creation date : mar. oct. 7 2014
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQM4HEP_ARCHIVER_H
#define DQM4HEP_ARCHIVER_H

// -- dqm4hep headers
#include "dqm4hep/Internal.h"
#include "dqm4hep/StatusCodes.h"

class TFile;
class TDirectory;

namespace dqm4hep {

  namespace core {

    template <typename T>
    class Directory;
    template <typename T>
    class Storage;

    /** Archiver class
     */
    class Archiver
    {
      friend class MonitorElementManager;
    public:
      /** Constructor
       */
      Archiver();

      /** Constructor with file name and opening mode
       */
      Archiver(const std::string &archiveFileName, const std::string &openingMode = "RECREATE", bool allowSuffix = true);

      /** Destructor
       */
      virtual ~Archiver();

      /** Open a new archive.
       *  Close the current file if opened. Supported opening mode are the TFile opening mode option (see TFile)
       */
      StatusCode open(const std::string &archiveFileName, const std::string &openingMode = "RECREATE", bool allowSuffix = true);

      /** Close the current archive
       */
      StatusCode close();

      /** Archive the current state of the storage in the root TDirectory
       */
      StatusCode archive(MeStoragePtr storage, const std::string &dirName = "");

      /** Get the file name
       */
      const std::string &getFileName() const;

      /** Whether the archive is opened
       */
      bool isOpened() const;

      /** Get the opening mode of this archive
       */
      const std::string &getOpeningMode() const;

    private:
      /** Fill recursively the TDirectory with the Directory
       */
      static StatusCode recursiveFill(MonitorElementDir directory, TDirectory *pROOTDir);

      /** Create TDirectories as labeled in the Directory
       */
      static StatusCode createTDirectories(MonitorElementDir directory, TDirectory *pROOTDir);

      /** Write the monitor elements contained in the Directory in the TDirectory
       */
      static StatusCode writeMonitorElements(MonitorElementDir directory, TDirectory *pROOTDir);

    private:
      // members
      std::string           m_fileName;        ///< The root file name
      std::string           m_openingMode;     ///< The root file opening mode
      bool                  m_isOpened;        ///< Whether the archive is opened
      TFile                *m_pArchiveFile;    ///< The actual archive implementation (root file)
    };

  }

}

#endif  //  DQM4HEP_ARCHIVER_H
