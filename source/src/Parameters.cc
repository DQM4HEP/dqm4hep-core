  /// \file Parameters.cc
/*
 *
 * Parameters.cc source template automatically generated by a class generator
 * Creation date : mer. janv. 25 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/Parameters.h"
#include "dqm4hep/Parameter.h"

// -- std headers
#include <memory>

namespace dqm4hep {

  namespace core {

    Parameters::Parameters()
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    Parameters::~Parameters()
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    StringVector Parameters::getKeys() const
    {
      StringVector keys;

      for(auto iter = m_parametersMap.begin(), endIter = m_parametersMap.end() ; endIter != iter ; ++iter)
        keys.push_back(iter->first);

      return std::move(keys);
    }

    //-------------------------------------------------------------------------------------------------

    StringVector Parameters::getValues() const
    {
      StringVector values;

      for(auto iter = m_parametersMap.begin(), endIter = m_parametersMap.end() ; endIter != iter ; ++iter)
        values.push_back(iter->second);

      return std::move(values);
    }

    //-------------------------------------------------------------------------------------------------

    bool Parameters::exists(const std::string &name) const
    {
      return (m_parametersMap.find(name) != m_parametersMap.end());
    }

    //-------------------------------------------------------------------------------------------------

    void Parameters::reset()
    {
      m_parametersMap.clear();
    }

  }

}
