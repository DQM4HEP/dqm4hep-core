  /// \file ConfigurationManager.cc
/*
 *
 * ConfigurationManager.cc source template automatically generated by a class generator
 * Creation date : jeu. janv. 26 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "dqm4hep/ConfigurationManager.h"
#include "dqm4hep/XmlConfigurationIO.h"
#include "dqm4hep/JsonConfigurationIO.h"
#include "dqm4hep/Logging.h"

#include <algorithm>

namespace dqm4hep {

  namespace core {

    ConfigurationManager::ConfigurationManager()
    {
      m_pRootParameterDirectory = ParameterDirectory::createTopLevelDirectory();

      // register possible configuration IO implementation
      THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->addConfigurationIO<XmlConfigurationIO>());
      THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, this->addConfigurationIO<JsonConfigurationIO>());
    }

    //-------------------------------------------------------------------------------------------------

    ConfigurationManager::~ConfigurationManager()
    {
      delete m_pRootParameterDirectory;

      for(auto iter = m_configurationIOMap.begin(), endIter = m_configurationIOMap.end() ; endIter != iter ; ++iter)
        delete iter->second;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode ConfigurationManager::readSettings(const std::string &ioType, const std::string &input)
    {
      auto findIter = m_configurationIOMap.find(ioType);

      if(findIter == m_configurationIOMap.end())
      {
        LOG4CXX_ERROR( dqmMainLogger, "ConfigurationManager::readSettings() : configuration io '" + ioType + "' not supported");
        return STATUS_CODE_NOT_FOUND;
      }

      m_pRootParameterDirectory->reset();
      return findIter->second->read(input, m_pRootParameterDirectory);
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode ConfigurationManager::writeSettings(const std::string &ioType, const std::string &output)
    {
      auto findIter = m_configurationIOMap.find(ioType);

      if(findIter == m_configurationIOMap.end())
      {
        LOG4CXX_ERROR( dqmMainLogger, "ConfigurationManager::writeSettings() : configuration io '" + ioType + "' not supported");
        return STATUS_CODE_NOT_FOUND;
      }

      return findIter->second->write(output, m_pRootParameterDirectory);
    }

    //-------------------------------------------------------------------------------------------------

    std::string ConfigurationManager::guessIOTypeFromInput(const std::string &input) const
    {
      bool possiblyHasExtension(std::string::npos != input.rfind("."));
      std::string extension(possiblyHasExtension ? input.substr(input.rfind(".")+1) : "");
      std::transform(extension.begin(), extension.end(), extension.begin(), ::tolower);

      if("xml" == extension)
        return "xml";
      else if("json" == extension)
        return "json";
      else
        return "";
    }

    //-------------------------------------------------------------------------------------------------

    void ConfigurationManager::printConfiguration() const
    {
      m_pRootParameterDirectory->ls(true);
    }

    //-------------------------------------------------------------------------------------------------

    ConfigurationHandle ConfigurationManager::createHandle()
    {
      return std::move(ConfigurationHandle(m_pRootParameterDirectory));
    }

    //-------------------------------------------------------------------------------------------------

    StringVector ConfigurationManager::getAvailableConfigurationIOs() const
    {
      StringVector configurationIOs;

      for(auto iter = m_configurationIOMap.begin(), endIter = m_configurationIOMap.end() ; endIter != iter ; ++iter)
        configurationIOs.push_back(iter->second->getType());

      return std::move(configurationIOs);
    }

  }

}
