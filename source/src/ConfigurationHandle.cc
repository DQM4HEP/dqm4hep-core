  /// \file ConfigurationHandle.cc
/*
 *
 * ConfigurationHandle.cc source template automatically generated by a class generator
 * Creation date : mer. janv. 25 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "dqm4hep/ConfigurationHandle.h"

namespace dqm4hep {

  namespace core {

    ConfigurationHandle::ConfigurationHandle(ParameterDirectory *pDirectory) :
      m_pDirectory(pDirectory)
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    ConfigurationHandle::ConfigurationHandle(ConfigurationHandle &&handle) :
      m_pDirectory(handle.m_pDirectory)
    {
      handle.m_pDirectory = nullptr;
    }

    //-------------------------------------------------------------------------------------------------

    ConfigurationHandle::~ConfigurationHandle()
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    void ConfigurationHandle::ls(bool recursive) const
    {
      m_pDirectory->ls(recursive);
    }

    //-------------------------------------------------------------------------------------------------

    const std::string &ConfigurationHandle::getDirectoryName() const
    {
      return m_pDirectory->getName();
    }

    //-------------------------------------------------------------------------------------------------

    std::string ConfigurationHandle::getDirectoryFullName() const
    {
      return std::move(m_pDirectory->getFullName());
    }

    //-------------------------------------------------------------------------------------------------

    bool ConfigurationHandle::subDirectoryExists(const std::string &dirName) const
    {
      return m_pDirectory->dirExists(dirName);
    }

    //-------------------------------------------------------------------------------------------------

    bool ConfigurationHandle::parameterExists(const std::string &parName) const
    {
      return m_pDirectory->getParameters().exists(parName);
    }

    //-------------------------------------------------------------------------------------------------

    bool ConfigurationHandle::parameterExists(const std::string &subDirName, const std::string &parName) const
    {
      const ParameterDirectory *pDirectory = m_pDirectory->getSubDirectory(subDirName);

      if(nullptr == pDirectory)
        return false;

      return pDirectory->getParameters().exists(parName);
    }

    //-------------------------------------------------------------------------------------------------

    ConfigurationHandle ConfigurationHandle::createHandle(const std::string &subDirName) const
    {
      return std::move(m_pDirectory->createHandle(subDirName));
    }

    //-------------------------------------------------------------------------------------------------

    StringVector ConfigurationHandle::getSubDirectorList() const
    {
      return std::move(m_pDirectory->getDirectorList());
    }

    //-------------------------------------------------------------------------------------------------

    StringVector ConfigurationHandle::getParameterNames() const
    {
      return std::move(m_pDirectory->getParameters().getKeys());
    }

  }

}
