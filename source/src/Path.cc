/// \file Path.cc
/*
 *
 * Path.cc source template automatically generated by a class generator
 * Creation date : mer. janv. 6 2016
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include <dqm4hep/Path.h>

// -- std headers
#include <algorithm>

namespace dqm4hep {

  namespace core {

    Path::Path()
    {

    }

    //-------------------------------------------------------------------------------------------------

    Path::Path(const std::string &path) :
		    m_path(path)
    {
      Path::normalize(m_path);
    }

    //-------------------------------------------------------------------------------------------------

    std::vector<std::string> Path::getSplitPath() const
    {
      if(!this->isValid())
        return std::vector<std::string>();

      std::vector<std::string> splitPath;
      dqm4hep::core::tokenize(m_path, splitPath, "/");

      return splitPath;
    }

    //-------------------------------------------------------------------------------------------------

    const std::string &Path::getPath() const
    {
      return m_path;
    }

    //-------------------------------------------------------------------------------------------------

    bool Path::isValid() const
    {
      if(dqm4hep::core::containsSpecialCharacters(m_path))
        return false;

      if(std::string::npos != m_path.find("//"))
        return false;

      return true;
    }

    //-------------------------------------------------------------------------------------------------

    bool Path::isRelative() const
    {
      if(!this->isValid())
        return false;

      if(m_path.empty())
        return true;

      if(m_path.at(0) == '/')
        return false;

      return true;
    }

    //-------------------------------------------------------------------------------------------------

    std::string& Path::normalize(std::string &path)
    {
      size_t pos = path.find("//");

      while(std::string::npos != pos)
      {
        path.replace(pos, 2, "/");
        pos = path.find("//");
      }

      pos = path.find("/./");

      while(std::string::npos != pos)
      {
        path.replace(pos, 3, "/");
        pos = path.find("/./");
      }

      return path;
    }

    //-------------------------------------------------------------------------------------------------

    Path &Path::operator +=(const Path &path)
    {
      if(path.m_path.empty())
        return *this;

      if(m_path.empty())
      {
        m_path = path.m_path;
        return *this;
      }

      size_t pos = std::string::npos;

      pos = m_path.find_last_not_of("/");
      std::string path1 = (pos == std::string::npos) ? m_path : m_path.substr(0, pos+1);

      pos = path.m_path.find_first_not_of("/");
      std::string path2 = (pos == std::string::npos) ? path.m_path : path.m_path.substr(pos);

      m_path = path1 + "/" + path2;
      Path::normalize(m_path);

      return *this;
    }

    //-------------------------------------------------------------------------------------------------

    Path &Path::operator =(const Path &path)
    = default;

    //-------------------------------------------------------------------------------------------------

    Path &Path::operator =(const std::string &path)
    {
      m_path = path;
      Path::normalize(m_path);

      return *this;
    }

  }

}
