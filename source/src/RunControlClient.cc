/// \file RunControlClient.cc
/*
 *
 * RunControlClient.cc source template automatically generated by a class generator
 * Creation date : mar. oct. 7 2014
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

#include "dqm4hep/RunControlClient.h"
#include "dqm4hep/NetworkTool.h"

namespace dqm4hep {

  namespace core {

    RunControlClient::RunControlClient(net::Client *pClient, const std::string &rcName) :
      m_pClient(pClient)
    {
      m_pRunControl = new RunControl(rcName);
      Network::Client::subscribeToRCAction(pClient, rcName, this, &RunControlClient::handleRunAction);
    }

    //-------------------------------------------------------------------------------------------------

    RunControlClient::~RunControlClient()
    {
      delete m_pRunControl;
    }

    //-------------------------------------------------------------------------------------------------

    Signal<const Run &> &RunControlClient::onStartOfRun()
    {
      return m_pRunControl->onStartOfRun();
    }

    //-------------------------------------------------------------------------------------------------

    Signal<void> &RunControlClient::onEndOfRun()
    {
      return m_pRunControl->onEndOfRun();
    }

    //-------------------------------------------------------------------------------------------------

    void RunControlClient::handleRunAction(const Json::Value &runAction)
    {
      const std::string &action(runAction.get("action", "").asString());

      if(action.empty())
        return;

      if(action == "start")
      {
        if(!m_pRunControl->onStartOfRun().hasConnection())
          return;

        Run run;
        Json::Value jsonRun(runAction.get("run", Json::Value()));

        if(jsonRun.empty())
          return;

        this->jsonToRun(jsonRun, run);
        m_pRunControl->startNewRun(run);
      }
      else if(action == "stop")
      {
        if(!m_pRunControl->onEndOfRun().hasConnection())
          return;

        m_pRunControl->endCurrentRun();
      }
    }

    //-------------------------------------------------------------------------------------------------

    void RunControlClient::jsonToRun(const Json::Value &value, Run &run) const
    {
      int runNumber = value.get("number", 0).asInt();
      int64_t startTime = value.get("start", int64_t(0)).asInt64();
      int64_t endTime = value.get("end", int64_t(0)).asInt64();
      std::string detectorName(value.get("detector", "").asString());
      std::string description(value.get("description", "").asString());

      run.setRunNumber(runNumber);
      run.setStartTime(std::chrono::system_clock::from_time_t(startTime));
      run.setEndTime(std::chrono::system_clock::from_time_t(endTime));
      run.setDetectorName(detectorName);
      run.setDescription(description);

      Json::Value parameters(value.get("parameters", Json::Value(Json::objectValue)));
      std::vector<std::string> parameterKeys(parameters.getMemberNames());

      for(unsigned int i=0 ; i<parameterKeys.size() ; ++i)
      {
        std::string key(parameterKeys.at(i));
        std::string value(parameters.get(key, "").asString());
        run.setParameter(key, value);
      }
    }

    //-------------------------------------------------------------------------------------------------

    void RunControlClient::runInfo(std::string &rcName, State &runState, Run &run) const
    {
      // send request
      Json::Value runInfoValue;
      Network::Client::runInfo(m_pClient, m_pRunControl->name(), runInfoValue);

      // decode response
      runState = static_cast<State>(runInfoValue.get("state", 0).asInt());
      rcName = runInfoValue.get("runcontrol", "").asString();

      Json::Value runValue(runInfoValue.get("run", Json::Value()));
      this->jsonToRun(runValue, run);
    }

  }

}
