/// \file GenericEvent.cc
/*
 *
 * GenericEvent.cc source template automatically generated by a class generator
 * Creation date : lun. mars 7 2016
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/GenericEvent.h"
#include "dqm4hep/StreamingHelper.h"
#include "dqm4hep/PluginManager.h"

namespace dqm4hep {

  namespace core {

    DQM_PLUGIN_DECL( GenericEventStreamer , "GenericEventStreamer" );

    GenericEvent::GenericEvent()
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    GenericEvent::~GenericEvent()
    {
      /* nop */
    }
    
    //-------------------------------------------------------------------------------------------------
    
    template <typename T>
    StatusCode GenericEvent::setValues(const std::string &key, const T &vals)
    {
      return STATUS_CODE_FAILURE;
    }

    //-------------------------------------------------------------------------------------------------

    template <typename T>
    StatusCode GenericEvent::getValues(const std::string &key, T &vals) const
    {
      return STATUS_CODE_FAILURE;
    }

    //-------------------------------------------------------------------------------------------------

    template <>
    StatusCode GenericEvent::setValues(const std::string &key, const IntVector &vals)
    {
      m_intValues[ key ] = vals;
      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    template <>
    StatusCode GenericEvent::setValues(const std::string &key, const FloatVector &vals)
    {
      m_floatValues[ key ] = vals;
      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    template <>
    StatusCode GenericEvent::setValues(const std::string &key, const DoubleVector &vals)
    {
      m_doubleValues[ key ] = vals;
      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    template <>
    StatusCode GenericEvent::setValues(const std::string &key, const StringVector &vals)
    {
      m_stringValues[ key ] = vals;
      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    template <>
    StatusCode GenericEvent::getValues(const std::string &key, IntVector &vals) const
    {
      auto findIter = m_intValues.find(key);
      
      if(m_intValues.cend() != findIter)
      {
        vals.insert(vals.begin(), findIter->second.cbegin(), findIter->second.cend());
        return STATUS_CODE_SUCCESS;
      }
      
      return STATUS_CODE_NOT_FOUND;
    }

    //-------------------------------------------------------------------------------------------------

    template <>
    StatusCode GenericEvent::getValues(const std::string &key, FloatVector &vals) const
    {
      auto findIter = m_floatValues.find(key);
      
      if(m_floatValues.cend() != findIter)
      {
        vals.insert(vals.begin(), findIter->second.cbegin(), findIter->second.cend());
        return STATUS_CODE_SUCCESS;
      }
      
      return STATUS_CODE_NOT_FOUND;
    }

    //-------------------------------------------------------------------------------------------------

    template <>
    StatusCode GenericEvent::getValues(const std::string &key, DoubleVector &vals) const
    {
      auto findIter = m_doubleValues.find(key);
      
      if(m_doubleValues.cend() != findIter)
      {
        vals.insert(vals.begin(), findIter->second.cbegin(), findIter->second.cend());
        return STATUS_CODE_SUCCESS;
      }
      
      return STATUS_CODE_NOT_FOUND;
    }

    //-------------------------------------------------------------------------------------------------

    template <>
    StatusCode GenericEvent::getValues(const std::string &key, StringVector &vals) const
    {
      auto findIter = m_stringValues.find(key);
      
      if(m_stringValues.cend() != findIter)
      {
        vals.insert(vals.begin(), findIter->second.cbegin(), findIter->second.cend());
        return STATUS_CODE_SUCCESS;
      }
      
      return STATUS_CODE_NOT_FOUND;
    }

    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    GenericEventStreamer::GenericEventStreamer()
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    GenericEventStreamer::~GenericEventStreamer()
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    EventPtr GenericEventStreamer::createEvent() const
    {
      return std::shared_ptr<Event>(new EventBase<GenericEvent>(new GenericEvent()));
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode GenericEventStreamer::write(const EventPtr &event, xdrstream::IODevice *pDevice)
    {
      const GenericEvent *pGenericEvent = event->getEvent<GenericEvent>();

      if(NULL == pGenericEvent)
        return STATUS_CODE_INVALID_PARAMETER;

      if( ! XDR_TESTBIT( event->writeBase(pDevice) , xdrstream::XDR_SUCCESS ) )
        return STATUS_CODE_FAILURE;

      // write event contents
      const GenericEvent::IntVectorMap &intVals(pGenericEvent->m_intValues);
      if( ! XDR_TESTBIT( StreamingHelper::write( pDevice , intVals ) , xdrstream::XDR_SUCCESS ) )
        return STATUS_CODE_FAILURE;

      if( ! XDR_TESTBIT( StreamingHelper::write( pDevice , pGenericEvent->m_floatValues ) , xdrstream::XDR_SUCCESS ) )
        return STATUS_CODE_FAILURE;

      if( ! XDR_TESTBIT( StreamingHelper::write( pDevice , pGenericEvent->m_doubleValues ) , xdrstream::XDR_SUCCESS ) )
        return STATUS_CODE_FAILURE;

      if( ! XDR_TESTBIT( StreamingHelper::write( pDevice , pGenericEvent->m_stringValues ) , xdrstream::XDR_SUCCESS ) )
        return STATUS_CODE_FAILURE;

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode GenericEventStreamer::read(EventPtr &event, xdrstream::IODevice *pDevice)
    {
      event = this->createEvent();
      GenericEvent *pGenericEvent = event->getEvent<GenericEvent>();

      // read event info
      if( ! XDR_TESTBIT( event->readBase(pDevice) , xdrstream::XDR_SUCCESS ) )
        return STATUS_CODE_FAILURE;

      // write event contents
      if( ! XDR_TESTBIT( StreamingHelper::read( pDevice , pGenericEvent->m_intValues ) , xdrstream::XDR_SUCCESS ) )
        return STATUS_CODE_FAILURE;

      if( ! XDR_TESTBIT( StreamingHelper::read( pDevice , pGenericEvent->m_floatValues ) , xdrstream::XDR_SUCCESS ) )
        return STATUS_CODE_FAILURE;

      if( ! XDR_TESTBIT( StreamingHelper::read( pDevice , pGenericEvent->m_doubleValues ) , xdrstream::XDR_SUCCESS ) )
        return STATUS_CODE_FAILURE;

      return STATUS_CODE_SUCCESS;
    }

  }

}
