  /// \file ParameterDirectory.cc
/*
 *
 * ParameterDirectory.cc source template automatically generated by a class generator
 * Creation date : mer. janv. 25 2017
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "dqm4hep/ParameterDirectory.h"
#include "dqm4hep/ConfigurationHandle.h"

namespace dqm4hep {

  namespace core {

    ParameterDirectory::ParameterDirectory(const std::string &name, ParameterDirectory *pParent) :
      m_name(name),
      m_pParentDirectory(pParent)
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    ParameterDirectory::~ParameterDirectory()
    {
      for(auto iter = m_subDirectories.begin(), endIter = m_subDirectories.end() ; endIter != iter ; ++iter)
        delete iter->second;
    }

    //-------------------------------------------------------------------------------------------------

    const std::string &ParameterDirectory::getName() const
    {
      return m_name;
    }

    //-------------------------------------------------------------------------------------------------

    std::string ParameterDirectory::getFullName() const
    {
      std::string fullName = m_name;
      ParameterDirectory *pParentDirectory(this->m_pParentDirectory);

      while(pParentDirectory)
      {
        fullName = pParentDirectory->getName() + "/" + fullName;
        pParentDirectory = pParentDirectory->m_pParentDirectory;
      }

      fullName = "/" + fullName;
      return std::move(fullName);
    }

    //-------------------------------------------------------------------------------------------------

    ParameterDirectory *ParameterDirectory::mkdir(const std::string &name)
    {
      if(name.empty())
        return nullptr;

      StringVector directories;
      DQM4HEP::tokenize(name, directories, "/");

      if(directories.empty())
        return nullptr;

      ParameterDirectory *pDirectory(this);

      for(auto iter = directories.begin(), endIter = directories.end() ; endIter != iter ; ++iter)
      {
        auto findIter = pDirectory->find(*iter);

        if(findIter == pDirectory->end())
        {
          ParameterDirectory *pNewDirectory = new ParameterDirectory(*iter, pDirectory);
          findIter = pDirectory->m_subDirectories.insert(ParameterDirectoryMap::value_type(*iter, pDirectory)).first;
        }

        pDirectory = findIter->second;
      }

      return pDirectory;
    }

    //-------------------------------------------------------------------------------------------------

    bool ParameterDirectory::rmdir(const std::string &name)
    {
      if(name.empty())
        return false;

      StringVector directories;
      DQM4HEP::tokenize(name, directories, "/");

      if(directories.empty())
        return false;

      ParameterDirectory *pParentDirectory(m_pParentDirectory);
      ParameterDirectory *pDirectory(this);

      for(auto iter = directories.begin(), endIter = directories.end() ; endIter != iter ; ++iter)
      {
        auto findIter = pDirectory->find(*iter);

        if(findIter == pDirectory->end())
          return false;

        pParentDirectory = pDirectory;
        pDirectory = findIter->second;
      }

      return (1 == pParentDirectory->m_subDirectories.erase(pDirectory->getName()));
    }

    //-------------------------------------------------------------------------------------------------

    void ParameterDirectory::ls(bool recursive) const
    {
      this->ls(recursive, 0);
    }

    //-------------------------------------------------------------------------------------------------

    bool ParameterDirectory::dirExists(const std::string &name) const
    {
      return (this->getSubDirectory(name) != nullptr);
    }

    //-------------------------------------------------------------------------------------------------

    const Parameters &ParameterDirectory::getParameters() const
    {
      return m_parameters;
    }

    //-------------------------------------------------------------------------------------------------

    Parameters &ParameterDirectory::getParameters()
    {
      return m_parameters;
    }

    //-------------------------------------------------------------------------------------------------

    ConfigurationHandle ParameterDirectory::createHandle()
    {
      return std::move(ConfigurationHandle(this));
    }

    //-------------------------------------------------------------------------------------------------

    ConfigurationHandle ParameterDirectory::createHandle(const std::string &name)
    {
      ParameterDirectory *pDirectory(this->getSubDirectory(name));

      if(nullptr == pDirectory)
        throw StatusCodeException(STATUS_CODE_NOT_FOUND);

      return std::move(ConfigurationHandle(pDirectory));
    }

    //-------------------------------------------------------------------------------------------------

    StringVector ParameterDirectory::getDirectorList() const
    {
      StringVector dirList;

      for(auto iter = m_subDirectories.begin(), endIter = m_subDirectories.end() ; endIter != iter ; ++iter)
        dirList.push_back(iter->first);

      return std::move(dirList);
    }

    //-------------------------------------------------------------------------------------------------

    ParameterDirectory::iterator ParameterDirectory::begin()
    {
      return m_subDirectories.begin();
    }

    //-------------------------------------------------------------------------------------------------

    ParameterDirectory::iterator ParameterDirectory::end()
    {
      return m_subDirectories.end();
    }

    //-------------------------------------------------------------------------------------------------

    ParameterDirectory::const_iterator ParameterDirectory::begin() const
    {
      return m_subDirectories.begin();
    }

    //-------------------------------------------------------------------------------------------------

    ParameterDirectory::const_iterator ParameterDirectory::end() const
    {
      return m_subDirectories.end();
    }

    //-------------------------------------------------------------------------------------------------

    ParameterDirectory::iterator ParameterDirectory::find(const std::string &name)
    {
      return m_subDirectories.find(name);
    }

    //-------------------------------------------------------------------------------------------------

    ParameterDirectory::const_iterator ParameterDirectory::find(const std::string &name) const
    {
      return m_subDirectories.find(name);
    }

    //-------------------------------------------------------------------------------------------------

    void ParameterDirectory::reset()
    {
      for(auto iter = m_subDirectories.begin(), endIter = m_subDirectories.end() ; endIter != iter ; ++iter)
        delete iter->second;

      m_subDirectories.clear();
      m_parameters.reset();
    }

    //-------------------------------------------------------------------------------------------------

    void ParameterDirectory::ls(bool recursive, unsigned int depth) const
    {
      std::cout << std::string(depth, ' ') << "- " << m_name << std::endl;

      StringVector keys(m_parameters.getKeys());
      StringVector values(m_parameters.getValues());

      for(unsigned int p=0 ; p<keys.size() ; p++)
        std::cout << std::string(depth, ' ') << " * " << keys.at(p) << " : " << values.at(p) << std::endl;

      if(recursive)
      {
        for(auto iter = m_subDirectories.begin(), endIter = m_subDirectories.end() ; endIter != iter ; ++iter)
          iter->second->ls(true, depth+2);
      }
    }

    //-------------------------------------------------------------------------------------------------

    ParameterDirectory *ParameterDirectory::getSubDirectory(const std::string &subDirName)
    {
      if(subDirName.empty())
        return nullptr;

      StringVector directories;
      DQM4HEP::tokenize(subDirName, directories, "/");

      if(directories.empty())
        return nullptr;

      ParameterDirectory *pDirectory(this);

      for(auto iter = directories.begin(), endIter = directories.end() ; endIter != iter ; ++iter)
      {
        auto findIter = pDirectory->find(*iter);

        if(findIter == pDirectory->end())
          return nullptr;

        pDirectory = findIter->second;
      }

      return (this == pDirectory ? nullptr : pDirectory);
    }

    //-------------------------------------------------------------------------------------------------

    const ParameterDirectory *ParameterDirectory::getSubDirectory(const std::string &subDirName) const
    {
      if(subDirName.empty())
        return nullptr;

      StringVector directories;
      DQM4HEP::tokenize(subDirName, directories, "/");

      if(directories.empty())
        return nullptr;

      const ParameterDirectory *pDirectory(this);

      for(auto iter = directories.begin(), endIter = directories.end() ; endIter != iter ; ++iter)
      {
        auto findIter = pDirectory->find(*iter);

        if(findIter == pDirectory->end())
          return nullptr;

        pDirectory = findIter->second;
      }

      return (this == pDirectory ? nullptr : pDirectory);
    }

  }

}
