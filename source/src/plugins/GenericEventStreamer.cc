/// \file GenericEventStreamer.cc
/*
 *
 * GenericEvent.cc source template automatically generated by a class generator
 * Creation date : lun. mars 7 2016
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include <dqm4hep/Event.h>
#include <dqm4hep/EventStreamer.h>
#include <dqm4hep/StatusCodes.h>
#include <dqm4hep/GenericEvent.h>
#include <dqm4hep/PluginManager.h>
#include <dqm4hep/StreamingHelper.h>

namespace dqm4hep {

  namespace core {

    /**
     * @brief GenericEventStreamer class
     */
    class GenericEventStreamer : public EventStreamerPlugin {
    public:
      /** Constructor
       */
      GenericEventStreamer();

      /** Destructor
       */
      ~GenericEventStreamer() override;

      /** Factory method to create the corresponding event to this streamer.
       *  The event is expected to contains an allocated wrapped event
       */
      EventPtr createEvent() const override;

      /** Serialize the event and store it into a data stream.
       */
      StatusCode write(EventPtr event, xdrstream::IODevice *pDevice) override;

      /** De-serialize the event.
       */
      StatusCode read(EventPtr event, xdrstream::IODevice *pDevice) override;
    };
    
    //-------------------------------------------------------------------------------------------------
    //-------------------------------------------------------------------------------------------------

    GenericEventStreamer::GenericEventStreamer() {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    GenericEventStreamer::~GenericEventStreamer() {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    EventPtr GenericEventStreamer::createEvent() const {
      return std::shared_ptr<Event>(new EventBase<GenericEvent>(new GenericEvent()));
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode GenericEventStreamer::write(EventPtr event, xdrstream::IODevice *pDevice) {
      const GenericEvent *pGenericEvent = event->getEvent<GenericEvent>();

      if (nullptr == pGenericEvent)
        return STATUS_CODE_INVALID_PARAMETER;

      // write event contents
      const GenericEvent::IntVectorMap &intVals(pGenericEvent->m_intValues);
      if (!XDR_TESTBIT(StreamingHelper::write(pDevice, intVals), xdrstream::XDR_SUCCESS))
        return STATUS_CODE_FAILURE;

      if (!XDR_TESTBIT(StreamingHelper::write(pDevice, pGenericEvent->m_floatValues), xdrstream::XDR_SUCCESS))
        return STATUS_CODE_FAILURE;

      if (!XDR_TESTBIT(StreamingHelper::write(pDevice, pGenericEvent->m_doubleValues), xdrstream::XDR_SUCCESS))
        return STATUS_CODE_FAILURE;

      if (!XDR_TESTBIT(StreamingHelper::write(pDevice, pGenericEvent->m_stringValues), xdrstream::XDR_SUCCESS))
        return STATUS_CODE_FAILURE;

      return STATUS_CODE_SUCCESS;
    }

    //-------------------------------------------------------------------------------------------------

    StatusCode GenericEventStreamer::read(EventPtr event, xdrstream::IODevice *pDevice) {
      GenericEvent *pGenericEvent = event->getEvent<GenericEvent>();

      // write event contents
      if (!XDR_TESTBIT(StreamingHelper::read(pDevice, pGenericEvent->m_intValues), xdrstream::XDR_SUCCESS))
        return STATUS_CODE_FAILURE;

      if (!XDR_TESTBIT(StreamingHelper::read(pDevice, pGenericEvent->m_floatValues), xdrstream::XDR_SUCCESS))
        return STATUS_CODE_FAILURE;

      if (!XDR_TESTBIT(StreamingHelper::read(pDevice, pGenericEvent->m_doubleValues), xdrstream::XDR_SUCCESS))
        return STATUS_CODE_FAILURE;

      return STATUS_CODE_SUCCESS;
    }
    
    //-------------------------------------------------------------------------------------------------
    
    DQM_PLUGIN_DECL(GenericEventStreamer, "GenericEventStreamer");
  }
}
