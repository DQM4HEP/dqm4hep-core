/// \file AnalysisHelper.cc
/*
 *
 * XmlHelper.cc source template automatically generated by a class generator
 * Creation date : mar. juil. 1 2014
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Tom Coates
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include <dqm4hep/AnalysisHelper.h>

namespace dqm4hep {

  namespace core {

    //----------------------------------------------------------------------------------------------------

    float AnalysisHelper::findMean(MonitorElement *pMonitorElement, int testType = -1, float percentage = 1.0)
    {

      if (nullptr == pMonitorElement) {
        throw StatusCodeException(STATUS_CODE_INVALID_PTR);
      }

      TH1 *h = pMonitorElement->objectTo<TH1>();
      TAxis *axis = h->GetXaxis();
      int nbins = axis->GetNbins();
      int itest = -1;

      if (testType = 1)
	{
	  // Mean
	  itest = axis->FindBin(h->GetMean());
	}
      else if (testType = 2)
	{
	  // RMS
	   itest = axis->FindBin(h->GetRMS());
	}
      else
	{
	  throw StatusCodeException(STATUS_CODE_FAILURE); // The generic error statuscode is temporary until a specific statuscode for this exists, or a custom error message can be written here
	}

      float entries = percentage*h->GetEntries();
      float w = h->GetBinContent(itest);
      float x = h->GetBinCenter(itest);
      float sumw = w;
      float sumwx = w*x;

      for (Int_t i=1;i<nbins;i++)
	{
	  if (i>0)
	    {
	      w = h->GetBinContent(itest-i);
	      x = h->GetBinCenter(itest-i);
	      sumw += w;
	      sumwx += w*x;
	    }
	  if (i<= nbins) {
	    w = h->GetBinContent(itest+i);
	    x = h->GetBinCenter(itest+i);
	    sumw += w;
	    sumwx += w*x;
	  }
	  if (sumw > entries) break;
	}
	      
      float result = sumwx/sumw;
      return result;
	      
    }


  }

}
