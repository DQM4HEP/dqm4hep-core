/// \file DQMRunControl.cc
/*
 *
 * DQMRunControl.cc source template automatically generated by a class generator
 * Creation date : mar. oct. 7 2014
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

#include "dqm4hep/RunControl.h"
#include "dqm4hep/Run.h"
#include "dqm4hep/CoreTool.h"
#include "dqm4hep/Logging.h"

#include <algorithm>

namespace dqm4hep {

  namespace core {

    RunControl::RunControl(const std::string &name, const std::string &password) :
      m_runState(STOPPED_STATE),
      m_name(name),
      m_password(password)
    {
      /* nop */
    }

    //-------------------------------------------------------------------------------------------------

    const std::string &RunControl::getName() const
    {
      return m_name;
    }

    //-------------------------------------------------------------------------------------------------

    void RunControl::startNewRun(const Run &run, const std::string &password)
    {
      if(!m_password.empty() && password != m_password)
        throw StatusCodeException(STATUS_CODE_NOT_ALLOWED);

      if(this->getRunState() == RUNNING_STATE)
        this->endCurrentRun(password);

      m_run = run;
      m_run.setStartTime(CoreTool::now());
      m_runState = RUNNING_STATE;
      m_startOfRunSignal.process(m_run);
    }

    //-------------------------------------------------------------------------------------------------

    void RunControl::endCurrentRun(const std::string &password)
    {
      if(!m_password.empty() && password != m_password)
        throw StatusCodeException(STATUS_CODE_NOT_ALLOWED);

      if(this->getRunState() == STOPPED_STATE)
        return;

      m_run.setEndTime(CoreTool::now());
      m_runState = STOPPED_STATE;
      m_endOfRunSignal.process();
    }

    //-------------------------------------------------------------------------------------------------

    const Run &RunControl::getRun() const
    {
      return m_run;
    }

    //-------------------------------------------------------------------------------------------------

    State RunControl::getRunState() const
    {
      return m_runState;
    }

    //-------------------------------------------------------------------------------------------------

    Signal<const Run &> &RunControl::onStartOfRun()
    {
      return m_startOfRunSignal;
    }

    //-------------------------------------------------------------------------------------------------

    Signal<void> &RunControl::onEndOfRun()
    {
      return m_endOfRunSignal;
    }

  }

}
